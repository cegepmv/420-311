<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structures de donnée</title>
    <link>http://localhost:1313/420-311/index.html</link>
    <description>Objectifs généraux du cours Ce cours vous permettra de :&#xA;Concevoir et programmer des applications en Java en utilisant les principales structures de données.&#xA;Évaluer et comparer la complexité algorithmique des opérations (temps et mémoire).&#xA;Utiliser des fils d’exécution (threads) pour exécuter plusieurs tâches en parallèle.&#xA;Développer un esprit critique pour choisir la bonne structure et le bon paradigme selon le contexte.&#xA;Pourquoi étudier les structures de données ? Parce qu’elles sont au cœur de la programmation : tout logiciel, du plus simple au plus complexe, repose sur des structures de données.</description>
    <generator>Hugo</generator>
    <language>fr-ca</language>
    <lastBuildDate>Fri, 19 Sep 2025 11:51:10 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/420-311/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Préalables</title>
      <link>http://localhost:1313/420-311/intro/index.html</link>
      <pubDate>Tue, 26 Aug 2025 08:21:07 -0400</pubDate>
      <guid>http://localhost:1313/420-311/intro/index.html</guid>
      <description>Dans ce module nous ferons une courte révision des notions essentielles au cours.</description>
    </item>
    <item>
      <title>Structure de données</title>
      <link>http://localhost:1313/420-311/sdd/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-311/sdd/index.html</guid>
      <description>Dans ce chapitre nous allons découvrir quelques structures de données et apprendre à choisir la bonne structure selon le problème.&#xA;Ⓜ️ Le langage Java a élargi et harmonisé la bibliothèque de classes utilitaires (java.util).&#xA;Ⓜ️ On y trouve désormais des classes permettant de manipuler les principales structures de données, c’est-à-dire les vecteurs dynamiques, les ensembles, les listes chaînées, les queues et les tables associatives.&#xA;Ⓜ️ Nous commencerons par examiner les concepts communs qu’elles (structures de données) exploitent ainsi : généricité, itérateur, ordonnancement et relation d’ordre.</description>
    </item>
    <item>
      <title>Complexité algorithmique</title>
      <link>http://localhost:1313/420-311/complexalgo/index.html</link>
      <pubDate>Sat, 06 Sep 2025 17:51:48 -0400</pubDate>
      <guid>http://localhost:1313/420-311/complexalgo/index.html</guid>
      <description>Dans ce chapitre, nous allons voir ce que signifie la notation Big-O et analyser la complexité d’un algorithme simple, ainsi que comparer plusieurs approches pour résoudre un même problème. En fin, nous allons voir comment mesurer expérimentalement la performance d’un programme en Java.</description>
    </item>
    <item>
      <title>IO</title>
      <link>http://localhost:1313/420-311/io/index.html</link>
      <pubDate>Fri, 19 Sep 2025 11:51:10 -0400</pubDate>
      <guid>http://localhost:1313/420-311/io/index.html</guid>
      <description>Les entrées/sorties (IO) en Java regroupent l’ensemble des mécanismes permettant de lire et d’écrire des données, que ce soit dans un fichier, sur la console, à travers le réseau ou en mémoire. Le langage propose une riche bibliothèque (java.io et java.nio) avec des classes spécialisées pour traiter les flux de caractères (texte) et les flux binaires (octets). Comprendre ces outils est essentiel pour manipuler efficacement les données.</description>
    </item>
    <item>
      <title>Genericity</title>
      <link>http://localhost:1313/420-311/genericity/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-311/genericity/index.html</guid>
      <description>La généricité est un mécanisme qui permet d’écrire du code flexible et réutilisable en définissant des classes, interfaces ou méthodes paramétrées par des types. Dans ce chapitre nous allons voir comment la généricité renforce la sécurité de typage et son utilisation avec les collections (List, Map, Set).</description>
    </item>
    <item>
      <title>Ressources utiles</title>
      <link>http://localhost:1313/420-311/ressourcesutiles/index.html</link>
      <pubDate>Tue, 16 Sep 2025 09:34:50 -0400</pubDate>
      <guid>http://localhost:1313/420-311/ressourcesutiles/index.html</guid>
      <description>Tout au long du cours nous allons utiliser différents outils de développement logiciel largement employés dans l’industrie. Ces outils permettent de travailler de manière plus efficace, professionnelle et collaborative.&#xA;Git : pour gérer les versions du code et collaborer en équipe.&#xA;Maven : pour automatiser la gestion des dépendances et la compilation des projets Java.&#xA;Autres outils : environnements de développement (IDE), plateformes de test, documentation et suivi de projet.</description>
    </item>
  </channel>
</rss>